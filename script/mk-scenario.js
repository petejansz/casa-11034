/**
 * ESA monitor log file processor. Parse infile, produce JSON, CSV to stdout, file.
 * Author: Pete Jansz
*/

var fs = require( 'fs' )
var path = require( 'path' )
var util = require( 'util' )
var program = require( 'commander' )

program
    .version( '1.0.0' )
    .description( 'Make scenario' )
    .usage( 'options' )
    .option( '--inservicefile [inservicefile]', 'Input filename' )
    .option( '--outservicefile [outservicefile]', 'Output csv filename' )
    .option( '--findscenario <findscenario>', '' )
    .option( '--newscenario <newscenario>', '' )
    .option( '--maxreplacecount <maxreplacecount>', '', parseInt )
    .option( '--stdout', 'Write to stdout' )

    .parse( process.argv )

process.exitCode = 1

if ( !program.inservicefile )
{
    program.help()
}

var serviceFileLines = fs.readFileSync( program.inservicefile ).toString().trim().split( '\n' )
var players = []
players = createNewPlayers( serviceFileLines )
wrServiceFile( players )

process.exitCode = 0
/////////////////////////////////////////////////////////////////////////////////////

function createNewPlayers( serviceFileLines )
{
    var replacedCount = 0
    for ( var i = 0; i < serviceFileLines.length; i++ )
    {
        var csvLine = serviceFileLines[i]
        if ( !csvLine.match( /^#/ ) )
        {
            if ( replacedCount <= program.maxreplacecount && csvLine.endsWith( program.findscenario ) )
            {
                csvLine = csvLine.replace( program.findscenario, program.newscenario )
                replacedCount++
            }

            if ( replacedCount > 0 && replacedCount % 10000 == 0 )
            {
                console.log( Date() + ' replaced: ' + replacedCount )
            }

            players.push( createPlayer( csvLine ) )
        }
    }

    return players
}

function createPlayer( csvLine )
{
    var tokens = csvLine.trim().split( ',' )
    var index = 0
    var player = {}

    player.accountEmail = tokens[index++]
    player.ppState = tokens[index++]
    player.scState = tokens[index++]
    player.emailVerified = tokens[index++]

    return player
}

function wrServiceFile( players )
{
    var header = createServiceCsvHeader()

    fs.writeFileSync( program.outservicefile, header )

    for ( i = 0; i < players.length; i++ )
    {
        var player = players[i]
        var csvLine = util.format( '%s,%s,%s,%s\n',
            player.accountEmail, player.ppState, player.scState, player.emailVerified )
        fs.appendFileSync( program.outservicefile, csvLine )
    }
}

function createServiceCsvHeader()
{
    var header = util.format( "# Generated by %s @ %s\n", path.basename( __filename ), Date() )
    header += util.format( '# ACCOUNT_EMAIL,PORTAL_SERVICE,SECONDCHANCE_SERVICE,EMAIL_VERIFIED\n' )
    return header
}

