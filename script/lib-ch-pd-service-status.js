var chPdService = ( function ()
{
    var fs = require( 'fs' )
    var path = require( 'path' )
    var util = require( 'util' )

    const EmailVerifiedStatus =
    {
        NOT_VERIFIED: 0,
        VERIFIED: 1
    }

    const ServiceStatus =
    {
        PREACTIVE: 1,
        ACTIVE: 2,
        SUSPEND: 3,
        CLOSED: 4,
        COMPLETED: 5
    }

    getEmailVerifiedEnum = function() {return EmailVerifiedStatus},
    getServiceStatusEnum = function() {return ServiceStatus},
    getSqlResultHeaders = function ()
    {
        return 'CONTRACT_IDENTITY,ACCOUNT_EMAIL,CONTRACT_ID,EMAIL_VERIFIED,SERVICE_TYPE_IDS,SERVICE_STATUS_IDS'
    },

        convertCsvRecordToPlayer = function ( csvRecord )
        {
            var player =
            {
                contractIdentity: csvRecord.CONTRACT_IDENTITY.trim(),
                contractId: parseInt( csvRecord.CONTRACT_ID.trim() ),
                accountEmail: csvRecord.ACCOUNT_EMAIL.trim(),
                emailVerified: parseInt( csvRecord.EMAIL_VERIFIED.trim() ),
                portalService: 0,
                secondChanceService: 0
            }

            if ( csvRecord.SERVICE_TYPE_IDS.match( "^1, 500" ) && csvRecord.SERVICE_STATUS_IDS.includes( ',' ) )
            {
                player.portalService = parseInt( csvRecord.SERVICE_STATUS_IDS.split( ',' )[0].trim() )
                player.secondChanceService = parseInt( csvRecord.SERVICE_STATUS_IDS.split( ',' )[1].trim() )
            }
            else if ( csvRecord.SERVICE_TYPE_IDS.match( "^500, 1" ) && csvRecord.SERVICE_STATUS_IDS.includes( ',' ) )
            {
                player.portalService = parseInt( csvRecord.SERVICE_STATUS_IDS.split( ',' )[1].trim() )
                player.secondChanceService = parseInt( csvRecord.SERVICE_STATUS_IDS.split( ',' )[0].trim() )
            }

            return player
        },

        convertPlayerToFormattedString = function ( player )
        {
            var player2 = Object.assign( {}, player )

            player2.emailVerified = player2.emailVerified == 1 ? 'EMAIL_VERIFIED' : 'NOT_VERIFIED'
            if ( player2.portalService == ServiceStatus.ACTIVE ) { player2.portalService = 'ACTIVE' }
            if ( player2.portalService == ServiceStatus.SUSPEND ) { player2.portalService = 'SUSPEND' }
            if ( player2.portalService == ServiceStatus.PREACTIVE ) { player2.portalService = 'PREACTIVE' }

            if ( player2.secondChanceService == ServiceStatus.ACTIVE ) { player2.secondChanceService = 'ACTIVE' }
            if ( player2.secondChanceService == ServiceStatus.SUSPEND ) { player2.secondChanceService = 'SUSPEND' }
            if ( player2.secondChanceService == ServiceStatus.PREACTIVE ) { player2.secondChanceService = 'PREACTIVE' }

            if ( player2.newState == ServiceStatus.ACTIVE ) { player2.newState = 'ACTIVE' }
            if ( player2.newState == ServiceStatus.SUSPEND ) { player2.newState = 'SUSPEND' }
            if ( player2.newState == ServiceStatus.PREACTIVE ) { player2.newState = 'PREACTIVE' }

            var outputStr =
                player2.contractIdentity.toString().padStart( 17 )
                + player2.contractId.toString().padStart( 12 )
                + player2.emailVerified.toString().padStart( 22 )
                + player2.portalService.toString().padStart( 22 )
                + player2.secondChanceService.toString().padStart( 10 )
                + player2.newState.toString().padStart( 11 )
                + ' '.padStart( 2 )
                + player2.accountEmail.toString()

            return outputStr
        },

        createServiceCsvHeader = function ()
        {
            var header = util.format( "# Generated by %s @ %s\n", 'ch-pd-service.status.js', Date() )
            header += util.format( '# ACCOUNT_EMAIL,PORTAL_SERVICE,SECONDCHANCE_SERVICE,EMAIL_VERIFIED\n' )
            return header
        },

        wrServiceCsvFile = function ( filename, players )
        {
            var header = createServiceCsvHeader()

            fs.writeFileSync( filename, header )

            for ( i = 0; i < players.length; i++ )
            {
                var player = players[i]
                var csvLine = util.format( '%s,%s,%s,%s\n',
                    player.accountEmail, player.newState, player.newState, player.emailVerified )
                fs.appendFileSync( filename, csvLine )
            }
        }

    return {
        getEmailVerifiedEnum: getEmailVerifiedEnum,
        getServiceStatusEnum: getServiceStatusEnum,
        getSqlResultHeaders: getSqlResultHeaders,
        convertCsvRecordToPlayer: convertCsvRecordToPlayer,
        convertPlayerToFormattedString: convertPlayerToFormattedString,
        createServiceCsvHeader: createServiceCsvHeader,
        wrServiceCsvFile: wrServiceCsvFile
    }
} )();

module.exports = chPdService;